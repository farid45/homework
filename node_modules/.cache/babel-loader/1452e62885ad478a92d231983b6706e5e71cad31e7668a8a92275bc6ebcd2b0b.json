{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useForm = onSubmit => {\n  _s();\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState('');\n  const validateField = (name, value) => {\n    switch (name) {\n      case 'firstName':\n      case 'lastName':\n        return value.trim() !== '' ? '' : 'Это поле обязательно для заполнения';\n      case 'email':\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(value) ? '' : 'Введите корректный email';\n      case 'password':\n        if (value.length < 5) return 'Пароль должен содержать минимум 5 символов';\n        if (!/[0-9]/.test(value)) return 'Пароль должен содержать цифры';\n        if (!/[!@#$%^&*.,/]/.test(value)) return 'Пароль должен содержать специальные символы';\n        return '';\n      case 'confirmPassword':\n        return value === formData.password ? '' : 'Пароли не совпадают';\n      default:\n        return '';\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Валидация при изменении\n    const fieldError = validateField(name, value);\n    if (fieldError) {\n      setError(fieldError);\n    } else {\n      setError('');\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Проверка всех полей перед отправкой\n    let isValid = true;\n    const errors = {};\n    for (const field in formData) {\n      const errorMsg = validateField(field, formData[field]);\n      if (errorMsg) {\n        errors[field] = errorMsg;\n        isValid = false;\n      }\n    }\n    if (!isValid) {\n      setError(Object.values(errors)[0] || 'Пожалуйста, заполните все поля корректно');\n      return;\n    }\n\n    // Если все валидно, вызываем onSubmit и очищаем форму\n    onSubmit(formData);\n    setFormData({\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    });\n    setError('');\n  };\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    error\n  };\n};\n_s(useForm, \"1E4r3n+MUxqcD9E4Qbj6G+ZYUsI=\");\nexport default useForm;","map":{"version":3,"names":["useState","useForm","onSubmit","_s","formData","setFormData","firstName","lastName","email","password","confirmPassword","error","setError","validateField","name","value","trim","emailRegex","test","length","handleChange","e","target","prev","fieldError","handleSubmit","preventDefault","isValid","errors","field","errorMsg","Object","values"],"sources":["/Users/fariddzenetov/homework/homework/src/task-one/useForm.jsx"],"sourcesContent":["import { useState } from 'react';\n\nconst useForm = (onSubmit) => {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  });\n  const [error, setError] = useState('');\n\n  const validateField = (name, value) => {\n    switch (name) {\n      case 'firstName':\n      case 'lastName':\n        return value.trim() !== '' ? '' : 'Это поле обязательно для заполнения';\n      case 'email':\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(value) ? '' : 'Введите корректный email';\n      case 'password':\n        if (value.length < 5) return 'Пароль должен содержать минимум 5 символов';\n        if (!/[0-9]/.test(value)) return 'Пароль должен содержать цифры';\n        if (!/[!@#$%^&*.,/]/.test(value)) return 'Пароль должен содержать специальные символы';\n        return '';\n      case 'confirmPassword':\n        return value === formData.password ? '' : 'Пароли не совпадают';\n      default:\n        return '';\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Валидация при изменении\n    const fieldError = validateField(name, value);\n    if (fieldError) {\n      setError(fieldError);\n    } else {\n      setError('');\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // Проверка всех полей перед отправкой\n    let isValid = true;\n    const errors = {};\n    \n    for (const field in formData) {\n      const errorMsg = validateField(field, formData[field]);\n      if (errorMsg) {\n        errors[field] = errorMsg;\n        isValid = false;\n      }\n    }\n    \n    if (!isValid) {\n      setError(Object.values(errors)[0] || 'Пожалуйста, заполните все поля корректно');\n      return;\n    }\n    \n    // Если все валидно, вызываем onSubmit и очищаем форму\n    onSubmit(formData);\n    setFormData({\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    });\n    setError('');\n  };\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    error,\n  };\n};\n\nexport default useForm;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC;IACvCM,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,aAAa,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IACrC,QAAQD,IAAI;MACV,KAAK,WAAW;MAChB,KAAK,UAAU;QACb,OAAOC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,qCAAqC;MACzE,KAAK,OAAO;QACV,MAAMC,UAAU,GAAG,4BAA4B;QAC/C,OAAOA,UAAU,CAACC,IAAI,CAACH,KAAK,CAAC,GAAG,EAAE,GAAG,0BAA0B;MACjE,KAAK,UAAU;QACb,IAAIA,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE,OAAO,4CAA4C;QACzE,IAAI,CAAC,OAAO,CAACD,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,+BAA+B;QAChE,IAAI,CAAC,eAAe,CAACG,IAAI,CAACH,KAAK,CAAC,EAAE,OAAO,6CAA6C;QACtF,OAAO,EAAE;MACX,KAAK,iBAAiB;QACpB,OAAOA,KAAK,KAAKX,QAAQ,CAACK,QAAQ,GAAG,EAAE,GAAG,qBAAqB;MACjE;QACE,OAAO,EAAE;IACb;EACF,CAAC;EAED,MAAMW,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAGM,CAAC,CAACC,MAAM;IAChCjB,WAAW,CAACkB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACT,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;;IAEjD;IACA,MAAMS,UAAU,GAAGX,aAAa,CAACC,IAAI,EAAEC,KAAK,CAAC;IAC7C,IAAIS,UAAU,EAAE;MACdZ,QAAQ,CAACY,UAAU,CAAC;IACtB,CAAC,MAAM;MACLZ,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;EAED,MAAMa,YAAY,GAAIJ,CAAC,IAAK;IAC1BA,CAAC,CAACK,cAAc,CAAC,CAAC;;IAElB;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,MAAMC,MAAM,GAAG,CAAC,CAAC;IAEjB,KAAK,MAAMC,KAAK,IAAIzB,QAAQ,EAAE;MAC5B,MAAM0B,QAAQ,GAAGjB,aAAa,CAACgB,KAAK,EAAEzB,QAAQ,CAACyB,KAAK,CAAC,CAAC;MACtD,IAAIC,QAAQ,EAAE;QACZF,MAAM,CAACC,KAAK,CAAC,GAAGC,QAAQ;QACxBH,OAAO,GAAG,KAAK;MACjB;IACF;IAEA,IAAI,CAACA,OAAO,EAAE;MACZf,QAAQ,CAACmB,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,0CAA0C,CAAC;MAChF;IACF;;IAEA;IACA1B,QAAQ,CAACE,QAAQ,CAAC;IAClBC,WAAW,CAAC;MACVC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE;IACnB,CAAC,CAAC;IACFE,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,OAAO;IACLR,QAAQ;IACRgB,YAAY;IACZK,YAAY;IACZd;EACF,CAAC;AACH,CAAC;AAACR,EAAA,CAjFIF,OAAO;AAmFb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}