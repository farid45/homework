{"ast":null,"code":"var _jsxFileName = \"/Users/fariddzenetov/homework/homework/src/task-one/TaskOne.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TaskOne.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskOne() {\n  _s();\n  /**\n   * Вынесите эти стейты в свой хук, все изменения полей должны валидирвоаться по разным правилам:\n   * firstName, lastName - не могут быть пустыми\n   * email - должен совпадать с паттерном email, оп которому стандартный email адрес- валидный, а test или @some или some@te - будут не валидны\n   * password - должен быть не меньше 5 символов и должен включать в себя цифры и сепц символы (%$@ и т.д.)\n   * confirmPassword - должен совпадать с password\n   * */\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  // Ваш хук должен возвращать фукцию которую будет использовать форма для сабмита данных\n  const onSubmitHandle = event => {\n    event.preventDefault();\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      confirmPassword\n    } = event;\n\n    // Здесь вы можете обрабатывать логику отправки формы,\n    // например, вызвать ваш API для отправки данных формы\n\n    // После успешной отправки формы, очистите все поля\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n    setPassword('');\n    setConfirmPassword('');\n\n    // И используйте alert, чтобы показать результат\n    alert(JSON.stringify({\n      firstName,\n      lastName,\n      email,\n      password,\n      confirmPassword\n    }));\n  };\n\n  // TODO: реализуйте пользовательский хук для валидации\n  // const submitForm = useSubmitForm(onSubmitHandle);\n\n  // Замени сеттеры из стейта на callback-и из твоего хука\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitHandle,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"firstName\",\n        placeholder: \"First Name\",\n        className: \"form-input\",\n        onChange: e => setFirstName(e.target.value),\n        value: firstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lastName\",\n        placeholder: \"Last Name\",\n        className: \"form-input\",\n        onChange: e => setLastName(e.target.value),\n        value: lastName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        className: \"form-input\",\n        onChange: e => setEmail(e.target.value),\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        className: \"form-input\",\n        onChange: e => setPassword(e.target.value),\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"confirmPassword\",\n        placeholder: \"Confirm Password\",\n        className: \"form-input\",\n        onChange: e => setConfirmPassword(e.target.value),\n        value: confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"form-button\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskOne, \"3In3BG5NnIBB4QDp9ucTFN1HG5A=\");\n_c = TaskOne;\nexport default TaskOne;\nvar _c;\n$RefreshReg$(_c, \"TaskOne\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskOne","_s","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","setError","onSubmitHandle","event","preventDefault","alert","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/Users/fariddzenetov/homework/homework/src/task-one/TaskOne.jsx"],"sourcesContent":["import React, {useState} from 'react';\nimport './TaskOne.css';\n\nfunction TaskOne() {\n    /**\n     * Вынесите эти стейты в свой хук, все изменения полей должны валидирвоаться по разным правилам:\n     * firstName, lastName - не могут быть пустыми\n     * email - должен совпадать с паттерном email, оп которому стандартный email адрес- валидный, а test или @some или some@te - будут не валидны\n     * password - должен быть не меньше 5 символов и должен включать в себя цифры и сепц символы (%$@ и т.д.)\n     * confirmPassword - должен совпадать с password\n     * */\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [error, setError] = useState('');\n\n    // Ваш хук должен возвращать фукцию которую будет использовать форма для сабмита данных\n    const onSubmitHandle = (event) => {\n        event.preventDefault();\n\n        const {\n            firstName,\n            lastName,\n            email,\n            password,\n            confirmPassword,\n        } = event;\n\n        // Здесь вы можете обрабатывать логику отправки формы,\n        // например, вызвать ваш API для отправки данных формы\n\n        // После успешной отправки формы, очистите все поля\n        setFirstName('');\n        setLastName('');\n        setEmail('');\n        setPassword('');\n        setConfirmPassword('');\n\n\n        // И используйте alert, чтобы показать результат\n        alert(JSON.stringify({firstName,\n            lastName,\n            email,\n            password,\n            confirmPassword,}));\n    };\n\n    // TODO: реализуйте пользовательский хук для валидации\n    // const submitForm = useSubmitForm(onSubmitHandle);\n\n    // Замени сеттеры из стейта на callback-и из твоего хука\n    return (\n        <div className=\"form-container\">\n            <div className=\"error-message\">{error}</div>\n            <form onSubmit={onSubmitHandle}> {/* Измените здесь на submitForm, когда он будет готов */}\n                <input type=\"text\" name=\"firstName\" placeholder=\"First Name\" className=\"form-input\"\n                       onChange={(e) => setFirstName(e.target.value)} value={firstName}/>\n                <input type=\"text\" name=\"lastName\" placeholder=\"Last Name\" className=\"form-input\"\n                       onChange={(e) => setLastName(e.target.value)} value={lastName}/>\n                <input type=\"email\" name=\"email\" placeholder=\"Email\" className=\"form-input\"\n                       onChange={(e) => setEmail(e.target.value)} value={email}/>\n                <input type=\"password\" name=\"password\" placeholder=\"Password\" className=\"form-input\"\n                       onChange={(e) => setPassword(e.target.value)} value={password}/>\n                <input type=\"password\" name=\"confirmPassword\" placeholder=\"Confirm Password\" className=\"form-input\"\n                       onChange={(e) => setConfirmPassword(e.target.value)} value={confirmPassword}/>\n                <button type=\"submit\" className=\"form-button\">Register</button>\n            </form>\n        </div>\n    );\n}\n\nexport default TaskOne;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}